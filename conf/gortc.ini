; logfile
; main module log file
; default logs/rtc.log
; can be reload
; logfile = logs/rtc.log

; loglevel
; main module log level, can select in [debug, info, error, fatal]
; default info
; can be reload
; loglevel = info

[RTCModule]
; listen
; address to listen, example: 127.0.0.1:8080
; default ""
; can not be reload
listen = :8080

; tlslisten
; tls address to listen, example: 127.0.0.1:8443
; default ""
; can not be reload
; listen = :8443

; cert
; certification for tls server
; default ""
; can not be reload
; cert = sig.test.com.crt

; key
; private key for tls server
; default ""
; can not be reload
; key = sig.test.com.key

; location
; path to serve RTC service
; default /rtc
; can not be reload
; location = /rtc

; logfile
; rtc server log file
; default logs/rtc.log
; can be reload
; logfile = logs/rtc.log

; loglevel
; rtc server log level, can select in [debug, info, error, fatal]
; default info
; can be reload
; loglevel = info

; clientheadertimeout
; timer to receive http client request header, time duration format, example 10s means 10 seconds
; default 10s
; can not be reload yet
; clientheadertimeout = 10s

; keepalived
; timer to hold connection for http server if http request finished, time duration format, example 10s means 10 seconds
; default 60s
; can not be reload yet
; keepalived = 60s

; accessfile
; rtc server access log file
; default logs/access.log
; can be reload
; accessfile = logs/access.log

; qsize
; rtc server msg buffer for send failed
; default 1024
; can not be reload yet
; qsize = 1024

[APIModule]
; listen
; address to listen, example: 127.0.0.1:2539
; default ""
; can not be reload
listen = :2539

; tlslisten
; tls address to listen, example: 127.0.0.1:2540
; default ""
; can not be reload
; listen = :2540

; cert
; certification for tls server
; default ""
; can not be reload
; cert = api.test.com.crt

; key
; private key for tls server
; default ""
; can not be reload
; key = api.test.com.key

; logfile
; rtc server log file
; default logs/rtc.log
; can be reload
; logfile = logs/rtc.log

; loglevel
; rtc server log level, can select in [debug, info, error, fatal]
; default info
; can be reload
; loglevel = info

; clientheadertimeout
; timer to receive http client request header, time duration format, example 10s means 10 seconds
; default 10s
; can not be reload yet
; clientheadertimeout = 10s

; keepalived
; timer to hold connection for http server if http request finished, time duration format, example 10s means 10 seconds
; default 60s
; can not be reload yet
; keepalived = 60s

; accessfile
; rtc server access log file
; default logs/access.log
; can be reload
; accessfile = logs/access.log

[JSIPStack]
; realm
; rtc server domain for serve
; default "", must configured
; can be reload
realm = server.test.com

; location
; location for connecting to next rtc server
; default "/rtc"
; can be reload
; location = /rtc

; conntimeout
; timer for connecting to next rtc server, time duration format, example 10s means 10 seconds
; default 3s
; can be reload
; conntimeout = 3s

; retry
; retry time for connecting to next rtc server failed
; default 10
; can be reload
; retry = 10

; qsize
; jsip every layers(app, session, transaction layer) msg queue buffer size
; default 1024
; can not be reload
; qsize = 1024

; transtimer
; jsip transaction layer timer for wait response for the request, time duration format, example 10s means 10 seconds
; default 5s
; can be reload
; transtimer = 5s

; prtimer
; jsip timer for receiving provision response for the request, time duration format, example 10s means 10 seconds
; default 60s
; can be reload
; prtimer = 60s

; sessionlayer
; jsip session layer is open
; default true
; can be reload
; sessionlayer = true

; sessiontimer
; jsip session layer timer for session hold in INVITE session
; default 600s
; can be reload
; sessiontimer = 600s

; termnotify
; when session terminate, whether send a internal TERM msg to app layer
; default false
; can be reload
; termnotify = false
